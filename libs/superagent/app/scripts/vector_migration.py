import pinecone
import typesense
from decouple import AutoConfig
from pinecone import QueryResponse

from app.utils.prisma import prisma
from prisma.enums import DatasourceStatus

RANDOM_PINECONE_VECTOR = [
    0.19,
    0.1,
    0.65,
    0.78,
    0.68,
    0.72,
    0.12,
    0.84,
    0.33,
    0.56,
    0.43,
    0.31,
    0.6,
    0.75,
    0.3,
    0.09,
    0.35,
    0.09,
    0.65,
    0.85,
    0.82,
    0.24,
    0.09,
    0.27,
    0.23,
    0.23,
    0.35,
    0.88,
    0.94,
    0.34,
    0.9,
    0.16,
    0.26,
    0.95,
    0.69,
    0.09,
    0.29,
    0.44,
    0.48,
    0.02,
    0.59,
    0.42,
    0.59,
    0.38,
    0.44,
    0.84,
    0.52,
    0.83,
    0.93,
    0.73,
    0.27,
    0.7,
    0.05,
    0.15,
    0.27,
    0.01,
    0.6,
    0.43,
    0.34,
    0.75,
    0.11,
    0.97,
    0.53,
    0.49,
    0.36,
    0.2,
    0.56,
    0.9,
    0.42,
    0.35,
    0.26,
    0.54,
    0.04,
    0.81,
    0.7,
    0.29,
    0.56,
    0.82,
    0.54,
    0.83,
    0.6,
    0.92,
    0.63,
    0.04,
    0.46,
    0.38,
    0.61,
    0.41,
    0.81,
    0.61,
    0.42,
    0.82,
    0.39,
    0.58,
    0.8,
    0.33,
    0.59,
    0.44,
    0.64,
    0.5,
    0.57,
    0.07,
    0.17,
    0.6,
    0.22,
    0.49,
    0.8,
    0.62,
    0.91,
    0.35,
    0.73,
    0.59,
    0.39,
    0.5,
    0.1,
    0.99,
    0.3,
    0.68,
    0.32,
    0.24,
    0.53,
    0.64,
    0.42,
    0.85,
    0.02,
    0.21,
    0.14,
    0.44,
    0.54,
    0.66,
    0.46,
    0.04,
    0.06,
    0.71,
    0.39,
    0.37,
    0.51,
    0.33,
    0.84,
    0.56,
    0.14,
    0.61,
    0.44,
    0.01,
    0.25,
    0.33,
    0.3,
    0.29,
    0.92,
    0.3,
    0.6,
    0.73,
    0.9,
    0.46,
    0.82,
    0.33,
    0.8,
    0.28,
    0.59,
    0.15,
    0.41,
    0.51,
    0.2,
    0.44,
    0.65,
    0.4,
    0.95,
    0.45,
    0.06,
    0.45,
    0.49,
    0.5,
    0.9,
    0.7,
    0.28,
    0.07,
    0.41,
    0.05,
    0.67,
    0.89,
    0.23,
    0.79,
    0.04,
    0.37,
    0.77,
    0.84,
    0.37,
    0.37,
    0.51,
    0.66,
    0.1,
    0.86,
    0.81,
    0.44,
    0.66,
    0.49,
    0.28,
    0.69,
    0.27,
    0.9,
    0.72,
    0.75,
    0.35,
    0.12,
    0.58,
    0.75,
    0.41,
    0.55,
    0.37,
    0.43,
    0.55,
    0.02,
    0.17,
    0.83,
    0.13,
    0.25,
    0.49,
    0.15,
    0.92,
    0.57,
    0.61,
    0.41,
    0.27,
    0.51,
    0.75,
    0.29,
    0.67,
    0.08,
    0.31,
    0.63,
    0.24,
    0.27,
    0.44,
    0.57,
    0.71,
    0.19,
    0.47,
    0.39,
    0.32,
    0.51,
    0.06,
    0.98,
    0.87,
    0.41,
    0.45,
    0.27,
    0.94,
    0.96,
    0.02,
    0.58,
    0.38,
    0.46,
    0.23,
    0.99,
    0.52,
    0.6,
    0.32,
    0.69,
    0.34,
    0.83,
    0.08,
    0.69,
    0.09,
    0.52,
    0.08,
    0.27,
    0.04,
    0.14,
    0.73,
    0.44,
    0.74,
    0.07,
    0.01,
    0.91,
    0.44,
    0.59,
    0.04,
    0.03,
    0.2,
    0.93,
    0.76,
    0.41,
    0.26,
    0.91,
    0.83,
    0.62,
    0.57,
    0.97,
    0.32,
    0,
    0.45,
    0.64,
    0.77,
    0.78,
    1,
    0.57,
    0.41,
    0.52,
    0.57,
    0.3,
    0.69,
    0.62,
    0.48,
    0.46,
    0.1,
    0.67,
    0.27,
    0.06,
    0.99,
    0.51,
    0.97,
    0.71,
    0.59,
    0.87,
    0.49,
    0.86,
    0.98,
    0.59,
    0.69,
    0.39,
    0.99,
    0.19,
    0.01,
    0.24,
    0.87,
    0.75,
    0.32,
    0.57,
    0.4,
    0.55,
    0.76,
    0.15,
    0.19,
    0.02,
    0.4,
    0.6,
    0.02,
    0.74,
    0.66,
    0.7,
    0.42,
    0.13,
    0.77,
    0.14,
    0.46,
    0.32,
    0.54,
    0.44,
    0.05,
    0.84,
    0.26,
    0.48,
    0.21,
    0.78,
    0.95,
    0.81,
    0.21,
    0.56,
    0.97,
    1,
    0.32,
    0.83,
    0.85,
    0.99,
    0.57,
    0.04,
    0.41,
    0.64,
    0.23,
    0.04,
    0.56,
    0.9,
    0.21,
    0.27,
    0.81,
    0.06,
    0.23,
    0.5,
    0.64,
    0.83,
    0.56,
    0.6,
    0.4,
    0.82,
    0.88,
    0.67,
    0.33,
    0.91,
    0.03,
    0.27,
    0.22,
    0.29,
    0.54,
    0.11,
    0.62,
    0.81,
    0.95,
    0.95,
    0.39,
    0.35,
    0.66,
    0.18,
    0.36,
    0.36,
    0.22,
    0.23,
    0.12,
    0.03,
    0.73,
    0.2,
    0.36,
    0.86,
    0.35,
    0.9,
    0.45,
    0.83,
    0.79,
    0.03,
    0.33,
    0.96,
    0.76,
    0.72,
    0.32,
    0.16,
    0.57,
    0.51,
    0.4,
    0.36,
    0.96,
    0.82,
    0.63,
    0.71,
    0.17,
    0.09,
    0.72,
    0.66,
    0.2,
    0.77,
    0.32,
    0.66,
    0.95,
    0.9,
    0.54,
    0.66,
    0.86,
    0.18,
    0.3,
    0.16,
    0.82,
    0.87,
    0.84,
    0.76,
    0.28,
    0.03,
    0.55,
    0.03,
    0.61,
    0.55,
    0.81,
    0.85,
    0.04,
    0.24,
    0.7,
    0.19,
    0.52,
    0.41,
    0.43,
    0.41,
    0.14,
    0.85,
    0.09,
    0.83,
    0.2,
    0.58,
    0.78,
    0.37,
    0.45,
    0.59,
    0.04,
    0.18,
    0.18,
    0.47,
    0.07,
    0.22,
    0.73,
    0.78,
    0.12,
    0.29,
    0.86,
    0.76,
    0.61,
    0.45,
    0.12,
    0.9,
    0.35,
    0.06,
    0.83,
    0.37,
    0.42,
    1,
    0.31,
    0.02,
    0.56,
    0.07,
    0.19,
    0.34,
    0.62,
    0.73,
    0.37,
    0.13,
    0.63,
    0.68,
    0.9,
    0.71,
    0.19,
    0.56,
    0.85,
    0.49,
    0.24,
    0.97,
    0.36,
    0.28,
    0.76,
    0.78,
    0.24,
    0.6,
    0.86,
    0.2,
    0.6,
    0.73,
    0.74,
    0.9,
    0.69,
    0.49,
    0.66,
    0.73,
    0.96,
    0.27,
    0.23,
    0.97,
    0.37,
    0.69,
    0.28,
    0.3,
    0.31,
    0.57,
    0.67,
    0.28,
    0.91,
    0.49,
    0.38,
    0.82,
    0.23,
    0.54,
    0.85,
    0.46,
    0.72,
    0.02,
    0.94,
    0.17,
    0.37,
    0.78,
    0.93,
    0.63,
    0.36,
    0.06,
    0.39,
    0.6,
    0.89,
    0.76,
    0.19,
    0.72,
    0.01,
    0.49,
    0.77,
    0.15,
    0.94,
    0.32,
    0.61,
    0.79,
    0.73,
    0.96,
    0.18,
    0.28,
    0.3,
    0.67,
    0.08,
    0.41,
    0.7,
    0.4,
    0.67,
    0.8,
    0.93,
    0.67,
    0.52,
    0.7,
    0.69,
    0.67,
    0.5,
    0.68,
    0.48,
    0.82,
    0.6,
    0.02,
    0.61,
    0.28,
    0.86,
    0.91,
    0.87,
    0.62,
    0.94,
    0.23,
    0.74,
    0.87,
    0.5,
    0.22,
    0.54,
    0.87,
    0.13,
    0.89,
    0.52,
    0.64,
    0.41,
    0.79,
    0.19,
    0.3,
    0.31,
    0.88,
    0.23,
    0.91,
    0.51,
    0.8,
    0.7,
    0.62,
    0.52,
    0.03,
    0.54,
    0.34,
    0.55,
    0.62,
    0.85,
    0.84,
    0.3,
    0.06,
    0.75,
    0,
    0.21,
    0.16,
    0.68,
    0.13,
    0.12,
    0.23,
    0.94,
    0.74,
    0.62,
    0.62,
    0.64,
    0.94,
    0.25,
    0.22,
    0.23,
    0.38,
    0.15,
    0.02,
    0.55,
    0.67,
    0.89,
    0.88,
    0.78,
    0.27,
    0.61,
    0.5,
    0.54,
    0.89,
    0.95,
    0.49,
    0.3,
    0.54,
    0.28,
    0.08,
    0.95,
    0.26,
    0.12,
    0.55,
    0.79,
    0.43,
    0.07,
    0.7,
    0.01,
    0.71,
    0.72,
    0.05,
    0.34,
    0.7,
    0.17,
    0.24,
    0.38,
    0.47,
    0.99,
    0,
    0.3,
    0.6,
    0.29,
    0.65,
    0.36,
    0.47,
    0.04,
    0.74,
    0.48,
    0.77,
    0.31,
    0.01,
    0.9,
    0.35,
    0.87,
    0.8,
    0.43,
    0.55,
    0.27,
    0.11,
    0.63,
    0.66,
    0.36,
    0.61,
    0.74,
    0.52,
    0.73,
    0.26,
    0.02,
    0.91,
    0.23,
    0.88,
    0.28,
    0.14,
    0.02,
    0.12,
    0.43,
    0.31,
    0.59,
    0.19,
    0.06,
    0.05,
    0.77,
    0.37,
    0.27,
    0.02,
    0.43,
    0.34,
    0.6,
    0.45,
    0.44,
    0.42,
    0.78,
    0.49,
    0.13,
    0.13,
    0.9,
    0.25,
    0.34,
    0.44,
    0.87,
    0.07,
    0.44,
    0.85,
    0.72,
    0.04,
    0.16,
    0.48,
    0.39,
    0.52,
    0.69,
    0.56,
    0.77,
    0.57,
    0.87,
    0.21,
    0.89,
    0.01,
    0.57,
    0.88,
    0.32,
    0.62,
    0.63,
    0.19,
    0.47,
    0.27,
    0.48,
    0.2,
    0.68,
    0.41,
    0.98,
    0.19,
    0.09,
    0.39,
    0.65,
    0.91,
    0.75,
    0.92,
    0.68,
    0.23,
    1,
    0.98,
    0.47,
    0.94,
    0.81,
    0.04,
    0.5,
    0.19,
    0.08,
    0.51,
    0.24,
    0.42,
    0.17,
    0.88,
    0.47,
    0.06,
    0.85,
    0.4,
    0.05,
    0.45,
    0.97,
    0.11,
    0.36,
    0.69,
    0.69,
    0.62,
    0.86,
    0.33,
    0.24,
    0.47,
    0.17,
    0.96,
    0.03,
    0.87,
    0.53,
    0.87,
    0.96,
    0.85,
    0.38,
    0.79,
    0.2,
    0.99,
    0.84,
    0.53,
    0.63,
    0.08,
    0.74,
    0.65,
    0.8,
    0.21,
    0.67,
    0.58,
    0.59,
    0.22,
    0.56,
    0.23,
    0.51,
    0.06,
    0.13,
    0.47,
    0.18,
    0.44,
    0.33,
    0.07,
    0.66,
    0.62,
    0.21,
    0.3,
    0.37,
    0.26,
    0.76,
    0.31,
    0.05,
    0.22,
    0.39,
    0.56,
    0.99,
    0.38,
    0.48,
    0.51,
    0.1,
    0.66,
    0.65,
    0.02,
    0.23,
    0.67,
    0.17,
    0.64,
    0.37,
    0.71,
    0.16,
    0.98,
    0.09,
    0.99,
    0.52,
    0.32,
    0.25,
    0.37,
    0.34,
    0.33,
    0.93,
    0.2,
    0.94,
    0.68,
    0.69,
    0.82,
    0.62,
    0.84,
    0.61,
    0.2,
    0.25,
    0.48,
    0.14,
    0.61,
    0.96,
    0.12,
    0.91,
    0.07,
    0.47,
    0.81,
    0.93,
    0.3,
    0.97,
    0.11,
    0.54,
    0.99,
    0.95,
    0.29,
    0.29,
    0.61,
    0.12,
    0.41,
    0.42,
    0.35,
    0.67,
    0.58,
    0.88,
    0.91,
    0.38,
    0.45,
    0.68,
    0.51,
    0.87,
    0.32,
    0.35,
    0.02,
    0.14,
    0.81,
    0.29,
    0.42,
    0.34,
    0.67,
    0.87,
    0.58,
    0.33,
    0.05,
    0.7,
    0.49,
    0.26,
    0.16,
    0.21,
    0.67,
    0.34,
    0.14,
    0.17,
    0.77,
    0.24,
    0.16,
    0.01,
    0.33,
    0.23,
    0.15,
    0.76,
    0.3,
    0.55,
    0.86,
    0.12,
    0.42,
    0.25,
    0.72,
    0.78,
    0.19,
    0.29,
    0.15,
    0.98,
    0.03,
    0.96,
    0.59,
    0.71,
    0.76,
    0.82,
    0.67,
    0.07,
    0.67,
    0.94,
    0.24,
    0.78,
    0.96,
    0.37,
    0.04,
    0.28,
    0.15,
    0.51,
    0.98,
    0.45,
    0.28,
    0.38,
    0.37,
    0.74,
    0.47,
    0.45,
    0.74,
    0.57,
    0.1,
    0.35,
    0.84,
    0.06,
    0.3,
    0.45,
    0.43,
    0.98,
    0.87,
    0.52,
    0.24,
    0.28,
    0.29,
    0.62,
    0.35,
    0.8,
    0.5,
    0.21,
    0.55,
    0.12,
    0.17,
    0.87,
    0.19,
    0.23,
    0.28,
    0.15,
    0.25,
    0.83,
    0.47,
    0.48,
    0.45,
    0.64,
    0.61,
    0.34,
    0.83,
    0.76,
    0.99,
    0.73,
    0.22,
    0.51,
    0.08,
    0.15,
    0.68,
    0.04,
    0.47,
    0.47,
    0.51,
    0.27,
    0.89,
    0.83,
    0.88,
    0.22,
    0.74,
    0.42,
    0.63,
    0.26,
    0.55,
    0.74,
    0.58,
    0.49,
    0.6,
    0.71,
    0.65,
    0.99,
    0.09,
    0.23,
    0.57,
    0.39,
    0.63,
    0.68,
    0.09,
    0.83,
    0.57,
    0.12,
    0.92,
    0.76,
    0.5,
    0.25,
    0.07,
    0.21,
    0.29,
    0.63,
    0.6,
    0.9,
    0.97,
    0.55,
    0.38,
    0.12,
    0.27,
    0.19,
    0.27,
    0.88,
    0.06,
    0.21,
    0.94,
    0.72,
    0.23,
    0.56,
    0.94,
    0.87,
    0.14,
    0.39,
    0.64,
    0.89,
    0.73,
    0.33,
    0.16,
    0.1,
    0.77,
    0.86,
    0.72,
    0.11,
    0.06,
    0.88,
    0.21,
    0.82,
    0.98,
    0.7,
    0.68,
    0.87,
    0.21,
    0.08,
    0.83,
    0.52,
    0.08,
    0.8,
    0.93,
    0.76,
    0.12,
    0.52,
    0.57,
    0.34,
    0.22,
    1,
    0.13,
    0.08,
    0.71,
    0.71,
    0.85,
    0.52,
    0.1,
    0.29,
    0.43,
    0.55,
    0.57,
    0.31,
    0.79,
    0.98,
    0.74,
    0.75,
    0.79,
    0.24,
    0.16,
    0.81,
    0.87,
    0.04,
    0.7,
    0.27,
    0.98,
    0.7,
    0.44,
    0.34,
    0.66,
    0.77,
    0.59,
    0.05,
    0.04,
    0.35,
    0.85,
    0.18,
    0.49,
    0.33,
    0.03,
    0.52,
    0.22,
    0.55,
    0.87,
    0.56,
    0.49,
    0.06,
    0.95,
    0.13,
    0.42,
    0.1,
    0,
    0.69,
    0.21,
    0.32,
    0.42,
    0.72,
    0.48,
    0.21,
    0.15,
    0.73,
    0.63,
    0.46,
    0.44,
    0.07,
    0.19,
    0.27,
    0.89,
    0.72,
    0.64,
    0.66,
    0.1,
    0.73,
    0.85,
    0.12,
    0.9,
    0.12,
    0.84,
    0.91,
    0.95,
    0.11,
    0.47,
    0.21,
    0.92,
    0.37,
    0.82,
    0.3,
    0.32,
    0.42,
    0.83,
    0.06,
    0.85,
    0.18,
    0.06,
    0.41,
    0.5,
    0.89,
    0.71,
    0.7,
    0.66,
    0.65,
    0.83,
    0.36,
    0.05,
    0.94,
    0.49,
    0.19,
    0.96,
    0.29,
    0.56,
    0.4,
    0.71,
    0.61,
    0.44,
    0.24,
    0.51,
    0.34,
    0.84,
    0.22,
    0.05,
    0.34,
    0.84,
    0.87,
    0.99,
    0.02,
    0.46,
    0.48,
    0.28,
    0.89,
    0.66,
    0.74,
    0.85,
    0.35,
    0.68,
    0.23,
    0.23,
    0.77,
    0.94,
    0.48,
    0.81,
    0.18,
    0.92,
    0.25,
    0.38,
    0,
    0.89,
    0.83,
    0.1,
    0.43,
    0.13,
    0.39,
    0.82,
    0.54,
    0.14,
    0.43,
    0.17,
    0.35,
    0.33,
    0.47,
    0.31,
    0.82,
    0.62,
    0.86,
    0.93,
    0.04,
    0.94,
    0.59,
    0.93,
    0.33,
    0.97,
    0.92,
    0.7,
    0.25,
    0.67,
    0.74,
    0.59,
    0.86,
    0.27,
    0.51,
    0.38,
    0.86,
    0.72,
    0.17,
    0.58,
    0.15,
    0.17,
    0.09,
    0.52,
    0.63,
    0.42,
    0.21,
    0.87,
    0.81,
    0.72,
    0.73,
    0.36,
    0.12,
    0.9,
    0.5,
    0.65,
    0.45,
    0.73,
    0.8,
    0.79,
    0.79,
    0.08,
    0.26,
    0.74,
    0.65,
    0.35,
    0.85,
    0.82,
    0.22,
    0.47,
    0.58,
    0.86,
    0.37,
    0.34,
    0.38,
    0.31,
    0.67,
    0.48,
    0.34,
    0.91,
    0.11,
    0,
    0.91,
    0.17,
    0.56,
    0.46,
    0.77,
    0.44,
    0.18,
    0.71,
    0.49,
    0.1,
    0.64,
    0.72,
    0.56,
    0.88,
    0.54,
    0.18,
    0.09,
    0.29,
    0.06,
    0.98,
    0.24,
    0.66,
    0.68,
    0.62,
    0.6,
    0.23,
    0.03,
    0.18,
    0.47,
    0.68,
    0.22,
    0.34,
    0.11,
    0.96,
    0.31,
    0.16,
    0.39,
    0.36,
    0.56,
    0.41,
    0.42,
    0.78,
    0.67,
    0.95,
    0.49,
    0.18,
    0.22,
    0.7,
    0.8,
    0.02,
    0.6,
    0.87,
    0.22,
    0.08,
    0.71,
    0.61,
    0.99,
    0.45,
    0.3,
    0.7,
    0.2,
    0.18,
    0.34,
    0.3,
    0.04,
    0.37,
    0.08,
    0.05,
    0.9,
    0.01,
    0.1,
    0.99,
    0.32,
    0.49,
    0.06,
    0.23,
    0.75,
    0.04,
    0.89,
    0.09,
    0.06,
    0.13,
    0.63,
    0.48,
    0.26,
    0.05,
    0.15,
    0.53,
    0.23,
    0.62,
    0.81,
    0.12,
    0.82,
    0.41,
    0.91,
    0.3,
    0.94,
    0.35,
    0.65,
    0.69,
    0.2,
    0.95,
    0.64,
    0.27,
    0.68,
    0.57,
    0.83,
    0.99,
    0.1,
    0.46,
    0.58,
    0.66,
    0.81,
    0.68,
    0.13,
    0.79,
    0.35,
    0.94,
    0.45,
    0.87,
    0.14,
    0.71,
    0.28,
    0.07,
    0.61,
    0.87,
    0.29,
    0.39,
    0.59,
    0.5,
    0.37,
    0.8,
    0.87,
    0.33,
    0.86,
    0.22,
    0.11,
    0.02,
    0.67,
    0.1,
    0.86,
    0.47,
    0.36,
    0.42,
    0.21,
    0.15,
    0.68,
    0.2,
    0.89,
    0.02,
    0.96,
    0.84,
    0.24,
    0.65,
    0.13,
    0.08,
    0.79,
    0.11,
    0.02,
    0.72,
    0.38,
    0.24,
    0.22,
    0.05,
]

DOTENV_FILE = "../../.env"
config = AutoConfig(search_path=DOTENV_FILE)

ts_client = typesense.Client(
    {
        "nodes": [
            {
                "host": config("TYPESENSE_HOST"),
                "port": "443",
                "protocol": "https",
            }
        ],
        "api_key": config("TYPESENSE_API_KEY"),
    }
)


async def get_datasource_ids(start: int = 0, batch_size: int = 50):
    skip = start
    take = batch_size
    while True:
        datasources = await prisma.datasource.find_many(
            take=take,
            skip=skip,
            order={"createdAt": "desc"},
            where={
                "status": DatasourceStatus.DONE,
                "url": {
                    "not_in": [
                        "https://vercel.com",
                        "https://dgerrells.com",
                        "https://davidgerrells.com",
                        "https://davidgerrels.com",
                        "https://dgerrels.com",
                        "https://stripe.com/docs/api",
                    ]
                },
                "apiUserId": {"not_in": ["a7df7737-786c-4de0-9840-f3a37f0dc5d1"]},
            },
        )
        print("Fetched {} datasources at skip {}".format(len(datasources), skip))
        if not datasources:
            break
        yield datasources
        skip += take


def _extract_match_data(match):
    """Extracts id, text, and metadata from a match."""
    text = match.metadata.get("text")
    values = match.values
    metadata = match.metadata
    metadata.pop("text")
    return text, values, metadata


def _format_response(response: QueryResponse):
    """
    Formats the response dictionary from the vector database into a list of
    Response objects.
    """
    if not response.get("matches"):
        return []

    return [_extract_match_data((match)) for match in response["matches"]]


def get_pinecone_data(datasource_id, batch_size: int = 100):
    pinecone.init(
        api_key=config("PINECONE_API_KEY"), environment=config("PINECONE_ENVIRONMENT")
    )
    index = pinecone.Index(config("PINECONE_INDEX"))
    skip = 0
    take = batch_size
    while True:
        # formatted_responses = []
        # try:
        raw_responses: QueryResponse = index.query(
            RANDOM_PINECONE_VECTOR,
            filter={
                "datasource_id": {"$eq": datasource_id},
                "chunk": {"$gte": skip},
            },
            top_k=batch_size,
            include_metadata=True,
            include_values=True,
        )
        formatted_responses = _format_response(raw_responses)
        # except:
        #     import traceback
        #
        #     traceback.print_exc()
        #     print(
        #         "Failed to query pinecone for datasource_id: {}".format(datasource_id)
        #     )

        print("Fetched {} datapoints from pinecone".format(len(formatted_responses)))
        if not formatted_responses:
            break
        yield formatted_responses
        if len(formatted_responses) < batch_size:
            break
        skip += take


def _stringify_flat_dict(input_dict):
    return {
        key: str(value) if not isinstance(value, (str, int)) else value
        for key, value in input_dict.items()
    }


def upsert_to_typesense(pinecone_results):
    to_upsert = [
        {
            "id": f"{metadata['datasource_id']}_{int(metadata['chunk'])}",
            "vec": values,
            "text": text,
            "metadata": _stringify_flat_dict(metadata),
        }
        for text, values, metadata in pinecone_results
    ]
    print("Upserting {} datapoints to typesense".format(len(pinecone_results)))
    # try:
    ts_client.collections[config("TYPESENSE_COLLECTION")].documents.import_(
        to_upsert, {"action": "upsert"}, batch_size=20
    )
    # except Exception:
    #     import traceback
    #
    #     traceback.print_exc()
    #     print("Failed while upserting {}".format(to_upsert[0]["id"]))


async def main():
    await prisma.connect(timeout=150)
    async for datasource_batch in get_datasource_ids():
        for datasource in datasource_batch:
            print(
                "Fetching datasource: {} with url: {}".format(
                    datasource.id, datasource.url
                )
            )
            for pinecone_results in get_pinecone_data(datasource.id):
                upsert_to_typesense(pinecone_results)


# Bootstrap initial collection (unused in production)
def _create_collection() -> None:
    fields = [
        {
            "name": "vec",
            "type": "float[]",
            "num_dim": 1568,
            "embed": {
                "from": ["text"],
                "model_config": {
                    "model_name": "openai/text-embedding-ada-002",
                    "api_key": config("OPENAI_API_KEY"),
                },
            },
        },
        {"name": "text", "type": "string"},
        {"name": ".*", "type": "auto"},
    ]
    return ts_client.collections.create(
        {
            "name": "superagent",
            "fields": fields,
            "enable_nested_fields": True,
        }
    )


def _delete_collection() -> None:
    ts_client.collections["superagent"].delete()


def recreate_typesense_collection():
    _delete_collection()
    _create_collection()


def migrate_datasource(datasource_id="c0b90030-9f20-462f-a05d-d959d8f777e7"):
    for pinecone_results in get_pinecone_data(datasource_id):
        upsert_to_typesense(pinecone_results)
    return 1


if __name__ == "__main__":
    import asyncio

    result = asyncio.run(main())
